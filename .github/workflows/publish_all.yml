# .github/workflows/publish_testpypi.yml
---
name: test-n-build
on:
  push:
    tags:
      - v*
jobs:
  super-test:
    strategy:
      max-parallel: 2
      matrix:
        python_v: ['3.8', '3.9', '3.10', '']
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v4
      # must actually checkout for version determination
      - run: git checkout ${{ github.ref_name }}
      - run: uv python install ${{ matrix.python_v }}
      - run: uv python pin ${{ matrix.python_v }}
        if: ${{ matrix.python_v != '' }}
      # don't modify sync file! messes up version!
      - run: uv sync --all-extras --dev --frozen # ah order here matters?
      - run: uv build
      - name: Reinstall from wheel
        run: >
          uv pip install dist/logistro-$(uv
          run --no-sync --with setuptools-git-versioning
          setuptools-git-versioning)-py3-none-any.whl

      - name: Test
        run: uv run --no-sync poe test
        timeout-minutes: 8

      - name: Test (Debug)
        if: runner.debug
        run: uv run --no-sync poe debug-test

  store-build:
    name: build release
    needs: super-test
    if: always() && !cancelled() && !failure()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v4
      - uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"
      - run: git checkout ${{ github.ref_name }}
      - run: uv sync --frozen --all-extras
      - run: uv build
      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  publish-to-testpypi:
    name: >-
      Publish Python üêç distribution üì¶ to testPyPI
    needs:
      - super-test
      - store-build
    if: always() && !cancelled() && !failure()
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/p/tetsuya
    # Signs this workflow so pypi trusts it
    permissions:
      id-token: write
    steps:
      - name: Download the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Push to testPyPi
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/.
  github-release:
    name: >-
      Sign the Python üêç distribution üì¶ with Sigstore
      and upload them to GitHub Release
    needs:
      - publish-to-testpypi
      - super-test
      - store-build
    if: always() && !cancelled() && !failure()
    runs-on: ubuntu-latest

    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Sign the dists with Sigstore
        uses: sigstore/gh-action-sigstore-python@v3.0.0
        with:
          inputs: >-
            ./dist/*.tar.gz
            ./dist/*.whl
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release create
          "$GITHUB_REF_NAME"
          --repo "$GITHUB_REPOSITORY"
          --notes ""
      - name: Upload artifact signatures to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        # Upload to GitHub Release using the `gh` CLI.
        # `dist/` contains the built packages, and the
        # sigstore-produced signatures and certificates.
        run: >-
          gh release upload
          "$GITHUB_REF_NAME" dist/**
          --repo "$GITHUB_REPOSITORY"
  publish-to-pypi:
    name: >-
      Publish Python üêç distribution üì¶ to PyPI
    needs:
      - super-test
      - store-build
      - publish-to-testpypi
      - github-release
    if: always() && !cancelled() && !failure()
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/tetsuya
    # Signs this workflow so pypi trusts it
    permissions:
      id-token: write
    steps:
      - name: Download the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Push to PyPi
        uses: pypa/gh-action-pypi-publish@release/v1
