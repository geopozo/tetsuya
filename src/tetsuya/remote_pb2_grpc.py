# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import grpc
import warnings

from tetsuya import remote_pb2 as tetsuya_dot_remote__pb2

GRPC_GENERATED_VERSION = "1.75.1"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(
        GRPC_VERSION,
        GRPC_GENERATED_VERSION,
    )
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + f" but the generated code in tetsuya/remote_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.",
    )


class ServiceStub(object):
    """--- Service API ---"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.List = channel.unary_unary(
            "/tetsuya.Service/List",
            request_serializer=tetsuya_dot_remote__pb2.ListRequest.SerializeToString,
            response_deserializer=tetsuya_dot_remote__pb2.ListReply.FromString,
            _registered_method=True,
        )
        self.Run = channel.unary_unary(
            "/tetsuya.Service/Run",
            request_serializer=tetsuya_dot_remote__pb2.RunRequest.SerializeToString,
            response_deserializer=tetsuya_dot_remote__pb2.RunReply.FromString,
            _registered_method=True,
        )


class ServiceServicer(object):
    """--- Service API ---"""

    def List(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Run(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_ServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "List": grpc.unary_unary_rpc_method_handler(
            servicer.List,
            request_deserializer=tetsuya_dot_remote__pb2.ListRequest.FromString,
            response_serializer=tetsuya_dot_remote__pb2.ListReply.SerializeToString,
        ),
        "Run": grpc.unary_unary_rpc_method_handler(
            servicer.Run,
            request_deserializer=tetsuya_dot_remote__pb2.RunRequest.FromString,
            response_serializer=tetsuya_dot_remote__pb2.RunReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "tetsuya.Service",
        rpc_method_handlers,
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("tetsuya.Service", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class Service(object):
    """--- Service API ---"""

    @staticmethod
    def List(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/tetsuya.Service/List",
            tetsuya_dot_remote__pb2.ListRequest.SerializeToString,
            tetsuya_dot_remote__pb2.ListReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def Run(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/tetsuya.Service/Run",
            tetsuya_dot_remote__pb2.RunRequest.SerializeToString,
            tetsuya_dot_remote__pb2.RunReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )


class ConfigStub(object):
    """--- Config API ---"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Touch = channel.unary_unary(
            "/tetsuya.Config/Touch",
            request_serializer=tetsuya_dot_remote__pb2.TouchRequest.SerializeToString,
            response_deserializer=tetsuya_dot_remote__pb2.TouchReply.FromString,
            _registered_method=True,
        )


class ConfigServicer(object):
    """--- Config API ---"""

    def Touch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_ConfigServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "Touch": grpc.unary_unary_rpc_method_handler(
            servicer.Touch,
            request_deserializer=tetsuya_dot_remote__pb2.TouchRequest.FromString,
            response_serializer=tetsuya_dot_remote__pb2.TouchReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "tetsuya.Config",
        rpc_method_handlers,
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("tetsuya.Config", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class Config(object):
    """--- Config API ---"""

    @staticmethod
    def Touch(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/tetsuya.Config/Touch",
            tetsuya_dot_remote__pb2.TouchRequest.SerializeToString,
            tetsuya_dot_remote__pb2.TouchReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
